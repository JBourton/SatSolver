- When a variable is set to true, scan the list of lists and find all variables with the true variable; delete them.
- Then remove the from each clause set the negation of the variable set to true.
- Need recursion via backtracking: can do this by recursively calling branching_sat_solve twice at the end of the function; 
once with (partial assigment + new variable, clause_set - new variable) and then again with negation of new variable.

Say we have test list `clauses = [[1, -2], [-1, 3]]`

We set 1 to T, such that `clauses = [3]` (because [1, -2] must be T, and [-1, 3] has the F removed.
So this clause set is satisfiable under T F T i.e. [1, 0, 1].

- Select first value, e.g. val_to_elim = clause_set[0][0]
- [partial assignment changes by adding e.g. 1 or -1]
- This value will first represent T
- Find every instance of that value in the clause set
- If the value is +ve (i.e. val mod 2 == 0), delete entire disjunction from clause set; else, remove value from disjunction
- Then, set value to F and repeat


    for clause in clause_set:
        # print(clause)

        if chosen_literal in clause:
            clause_set.remove(clause)

        elif -chosen_literal in clause:
            print("hi")
            clause.remove(-chosen_literal)
            print(clause)

        print(clause_set)


